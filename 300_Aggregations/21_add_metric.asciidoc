
=== Adding a Metric to the Mix

The previous example told us the number of documents in each bucket, which is
useful. But often, our applications require more-sophisticated metrics about
the documents. For example, what is the average revenue of each vendor?

To get this information, we need to tell Elasticsearch which metrics to
calculate, and on which fields. This requires _nesting_ metrics inside the
buckets. Metrics will calculate mathematical statistics based on the values of
documents within a bucket.

Let's go ahead and add an `average` metric to our taxis example:

[source,js]
--------------------------------------------------
GET /taxis/_search
{
   "size" : 0,
   "aggs": {
      "vendors": {
         "terms": {
            "field": "vendor"
         },
         "aggs": { <1>
            "avg_revenue": { <2>
               "avg": {
                  "field": "total_amount" <3>
               }
            }
         }
      }
   }
}
--------------------------------------------------
// CONSOLE: 300_Aggregations/20_basic_example.json
<1> We add a new `aggs` level to hold the metric.
<2> We then give the metric a name: `avg_revenue`.
<3> And finally, we define it as an `avg` metric over the `total_amount` field.

As you can see, we took the previous example and tacked on a new `aggs` level.
This new aggregation level allows us to nest the `avg` metric inside the
`terms` bucket.  Effectively, this means we will generate an average for each
vendor.

Just like the `rides_per_vendor` example, we need to name our metric (`avg_revenue`)
so we can retrieve the values later.  Finally, we specify the metric itself (`avg`)
and what field we want the average to be calculated on (`total_amount`):

[source,js]
--------------------------------------------------
{
  ...
  "aggregations": {
    "vendors": {
      ...
      "buckets": [
{
          "key" : "Green",
          "doc_count" : 50253,
          "avg_revenue" : { <1>
            "value" : 22.447771675322958
          }
        },
        {
          "key" : "Black",
          "doc_count" : 49862,
          "avg_revenue" : {
            "value" : 22.613874092495085
          }
        },
        {
          "key" : "Red",
          "doc_count" : 39800,
          "avg_revenue" : {
            "value" : 22.31519195979896
          }
        },
        {
          "key" : "Yellow",
          "doc_count" : 34062,
          "avg_revenue" : {
            "value" : 22.063510950619435
          }
        },
        {
          "key" : "Blue",
          "doc_count" : 26023,
          "avg_revenue" : {
            "value" : 22.01809399377478
          }
        }
      ]
    }
  }
}
--------------------------------------------------
<1> New `avg_revenue` element in response

Although the response has changed minimally, the data we get out of it has grown
substantially.  Before, we knew that we have five different taxi vendors and how
many rides each of them handles.  Now we know that the average revenue of the
"Black" vendor is is $22.61. This is something that you can plug directly
into reports or graphs.
